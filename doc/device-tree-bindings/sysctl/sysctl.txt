= SYSCTL Signal Device Tree Bindings =

This binding is intended to represent the hardware sysctl signals present
internally in most IC (SoC, FPGA, ...) designs. SYSCTL signals for whole
standalone chips are most likely better represented as GPIOs, although there
are likely to be exceptions to this rule.

A sysctl node represents a register containing a set of HW block control functions.
The register are not cohesive enough to represent as any specific type of device.

Hardware blocks typically receive a sysctl signal. This signal is generated by
a sysctl provider (e.g. power management or clock module) and received by a
sysctl consumer (the module being sysctl, or a module managing when a sub-
ordinate module is sysctl). This binding exists to represent the provider and
consumer, and provide a way to couple the two together.

A sysctl signal is represented by the phandle of the provider, plus a sysctl
specifier - a list of DT cells that represents the sysctl signal within the
provider. The length (number of cells) and semantics of the sysctl specifier
are dictated by the binding of the sysctl provider, although common schemes
are described below.

A word on where to place sysctl signal consumers in device tree: It is possible
in hardware for a sysctl signal to affect multiple logically separate HW blocks
at once. In this case, it would be unwise to represent this sysctl signal in
the DT node of each affected HW block, since if activated, an unrelated block
may be sysctl. Instead, sysctl signals should be represented in the DT node
where it makes most sense to control it; this may be a bus node if all
children of the bus are affected by the sysctl signal, or an individual HW
block node for dedicated sysctl signals. The intent of this binding is to give
appropriate software access to the sysctl signals in order to manage the HW,
rather than to slavishly enumerate the sysctl signal that affects each HW
block.

= SYSCTL providers =

Required properties:
#syscon-cells:	Number of cells within a syscon specifier and a consumer data;
		Typically 2 for nodes with multiple sysctl outputs.

For example:

	sysctl: sysctl {
		#syscon-cells = <2>;
	};

= SYSCTL consumers =

Required properties:
syscon:		List of phandle, syscon specifier and consumer data,
		one entry for each sysctl signal that affects the device, or that the
		device manages.

Optional properties:
syscon-names:	List of sysctl signal name strings sorted in the same order as
		the sysctls property. Consumers drivers will use sysctl-names to
		match sysctl signal names with sysctl specifiers.

For example:

	device {
		syscons = <&sysctl 20 2>;
		syscon-names = "sysctl";
	};

This represents a device with a single sysctl signal named "sysctl".

	bus {
		syscons = <&sysctl 10 0> <&sysctl 11 1>;
		syscon-names = "dma", "mixer";
	};

This represents a bus that controls the sysctl signal of each of two sub-
ordinate devices. Consider for example a bus that fails to operate unless
all child devices has sysctl asserted.
